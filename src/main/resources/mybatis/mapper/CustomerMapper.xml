<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-/mabatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.exe.cozy.mapper.CustomerMapper">
	<!-- 이메일 중복확인 -->
	<select id="emailChk" resultType="int" parameterType="String">
		select count(*) from customer where customerEmail=#{customerEmail}
	</select>
	
	<!-- 데이터 한개 입력 -->
	<insert id="insertData" parameterType="CustomerDto">
		insert into customer (customerEmail,customerPwd,customerName,
		customerTel,customerDate,customerGrade,customerType,customerPoint)
		values (#{customerEmail},#{customerPwd},#{customerName},#{customerTel},
		sysdate,'FAMILY',0,3000)
	</insert>
	
	<!-- 로그인 확인 -->
	<select id="getLogin" parameterType="String" resultType="CustomerDto">
		select customerEmail,customerPwd
		from customer
		where customerEmail=#{customerEmail}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="forgot" parameterType="String" resultType="CustomerDto">
		select customerEmail,customerTel
		from customer
		where customerEmail=#{customerEmail}
	</select>
	
	<!-- 임시비밀번호 발급 -->
	<update id="updatePwd" parameterType="CustomerDto">
		update customer set customerPwd=#{customerPwd}
		where customerEmail=#{customerEmail}
	</update>
	
	<!-- 데이터 한개 읽기 -->
	<select id="getReadData" parameterType="String" resultType="CustomerDto">
		select customerEmail,customerPwd,customerName,customerTel,customerZipCode,
		customerRAddr,customerJAddr,customerDAddr,customerGrade,customerPoint
		from customer where customerEmail=#{customerEmail}
	</select>
	
	<!-- 데이터 수정 -->
	<update id="updateData" parameterType="CustomerDto">
		update customer set customerPwd=#{customerPwd},customerTel=#{customerTel},
		customerZipCode=#{customerZipCode},customerRAddr=#{customerRAddr},
		customerJAddr=#{customerJAddr},customerDAddr=#{customerDAddr}
		where customerEmail=#{customerEmail}
	</update>
	
	<!-- 포인트 수정 -->
	<update id="updatePoint" parameterType="CustomerDto">
		update customer set customerPoint=#{customerPoint}
		where customerEmail=#{customerEmail}
	</update>
	
	<!-- 데이터 삭제 -->
	<delete id="deleteData" parameterType="String">
		delete customer where customerEmail=#{customerEmail}
	</delete>
	
	<!-- 마이페이지 리뷰조회 -->
	<resultMap type="ReplyDto" id="ReplyDto">
		<result column="replyId" property="replyId"/>
		<result column="itemNum" property="itemNum"/>
		<result column="customerEmail" property="customerEmail"/>
		<result column="regDate" property="regDate"/>
		<result column="content" property="content"/>
		<result column="rating" property="rating"/>
		<collection property="item" resultMap="ItemDetailDto"></collection>
	</resultMap>
	
	<resultMap type="ItemDetailDto" id="ItemDetailDto">
		<result column="itemName" property="itemName"/>
		<result column="itemMainType" property="itemMainType"/>
		<result column="itemSubType" property="itemSubType"/>
		<result column="itemImage1" property="itemImage1"/>
	</resultMap>
	
	<select id="getReviewPaging" parameterType="ReplyDto" resultMap="ReplyDto">
		select 
			a.replyId
			,a.itemNum
			,a.customerEmail
			,a.regDate
			,a.content
			,a.rating
			,b.itemName
			,b.itemMainType
			,b.itemSubType
			,b.itemImage1
		from 
			reply a left join item b
		on
			a.itemNum=b.itemNum
		where
			a.customerEmail=#{customerEmail}
		order by
			a.replyId desc
	</select>
	
<!-- 	<select id="getReviewList" parameterType="ReplyDto" resultMap="ReplyDto">
		select 
			a.replyId
			,a.itemNum
			,a.customerEmail
			,a.regDate
			,a.content
			,a.rating
			,b.itemName
			,b.itemMainType
			,b.itemSubType
			,b.itemImage1
		from 
			reply a left join item b
		on
			a.itemNum=b.itemNum
		where
			a.customerEmail=#{customerEmail}
		order by
			a.replyId desc
	</select> -->
<!-- 	
	마이페이지 주문조회 리스트
	<resultMap type="ReplyDto" id="ReplyDto">
		<result column="replyId" property="replyId"/>
		<result column="itemNum" property="itemNum"/>
		<result column="customerEmail" property="customerEmail"/>
		<result column="regDate" property="regDate"/>
		<result column="content" property="content"/>
		<result column="rating" property="rating"/>
		<collection property="item" resultMap="ItemDetailDto"></collection>
	</resultMap>
	
	<resultMap type="ItemDetailDto" id="ItemDetailDto">
		<result column="itemName" property="itemName"/>
		<result column="itemMainType" property="itemMainType"/>
		<result column="itemSubType" property="itemSubType"/>
		<result column="itemImage1" property="itemImage1"/>
	</resultMap>
	
	<select id="getOrderList" parameterType="String" resultType="OrderDto">
		select
			a.orderNum,
			a.itemQty,
			a.orderState,
			a.orderDate,
			b.itemNum,
			b.(select fs.UUID_FILE_NAME||'.'||fs.FILE_EXTENSION
			from file_store fs
			where fs.no = item.itemImage1
        ) as itemImage1,
			b.itemPrice,
			b.itemDiscount
		from
			cozyorder a left join item b
		on
			a.itemNum=b.itemNum
		where
			customerEmail=#{customerEmail}
	</select>
	 -->
	 
	 <!-- 마이페이지 문의내역 리스트 -->
	 <resultMap type="ServiceQuestionDto" id="ServiceQuestionDto">
		<result column="serviceQueNum" property="serviceQueNum"/>
		<result column="serviceQueTitle" property="serviceQueTitle"/>
		<result column="serviceQueDate" property="serviceQueDate"/>
		<collection property="serviceAnswer" resultMap="ServiceAnswerDto"></collection>
	</resultMap>
	
	<resultMap type="ServiceAnswerDto" id="ServiceAnswerDto">
		<result column="serviceAnsContent" property="serviceAnsContent"/>
	</resultMap>
	 
 	 <select id="getQnaList" parameterType="ServiceQuestionDto" resultMap="ServiceQuestionDto">
	 	select
	 		a.serviceQueNum,
	 		a.serviceQueTitle,
	 		a.serviceQueDate,
	 		b.serviceAnsContent
	 	from
	 		serviceQuestion a left join serviceAnswer b
	 	on
	 		a.serviceQueNum=b.serviceQueNum
	 	where
	 		customerEmail=#{customerEmail}
	 	order by
	 		serviceQueNum desc
	 </select>
 
</mapper>